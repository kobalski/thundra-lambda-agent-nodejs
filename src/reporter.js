/*
*
* Stores reports generated by plugins (i.e. Tracer).
*
* sendReports function sends all reports with a single HTTPS request.
*
*/

import https from "https";
import {host, path} from "./constants"

class Reporter {
    constructor(apiKey) {
        this.reports = [];
        this.apiKey = apiKey;
    }

    addReport = (report) => {
        if (process.env.thundra_lambda_publish_cloudwatch_enable === "true") {
            let jsonStringReport = "\n" + JSON.stringify(report).replace(/\r?\n|\r/g, "") + "\n";
            process.stdout.write(jsonStringReport);
        }
        else {
            this.reports = [...this.reports, report];
        }
    };

    sendReports = async () => {
        await this.httpsRequest()
            .then(response => {
                if (response.status !== 200) {
                    console.log(this.reports);
                }
            })
            .catch(err => {
                console.error(err);
            })
    };

    httpsRequest = () => {
        return new Promise((resolve, reject) => {
            const options = {
                hostname: host,
                port: 443,
                path: path,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "ApiKey " + this.apiKey
                }
            };
            const request = https.request(
                options,
                response => {
                    let responseData = "";
                    response.on("data", chunk => {
                        responseData += chunk;
                    });

                    response.on("end", () => {
                        resolve({status: response.statusCode, data: responseData});
                    })
                });

            request.on("error", error => {
                reject(error);
            });

            request.write(JSON.stringify(this.reports));
            request.end();
        });
    };

}

export default Reporter;


